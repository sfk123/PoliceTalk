package com.sheng.android.policetalk.modal;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VOICE__MESSAGE".
*/
public class Voice_MessageDao extends AbstractDao<Voice_Message, Long> {

    public static final String TABLENAME = "VOICE__MESSAGE";

    /**
     * Properties of entity Voice_Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Owner = new Property(1, int.class, "owner", false, "OWNER");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Target_id = new Property(3, int.class, "target_id", false, "TARGET_ID");
        public final static Property User_id = new Property(4, int.class, "user_id", false, "USER_ID");
        public final static Property Voice_length = new Property(5, int.class, "voice_length", false, "VOICE_LENGTH");
        public final static Property Voice_path = new Property(6, String.class, "voice_path", false, "VOICE_PATH");
        public final static Property Read = new Property(7, boolean.class, "read", false, "READ");
        public final static Property Date_time = new Property(8, java.util.Date.class, "date_time", false, "DATE_TIME");
    }


    public Voice_MessageDao(DaoConfig config) {
        super(config);
    }
    
    public Voice_MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VOICE__MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OWNER\" INTEGER NOT NULL ," + // 1: owner
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"TARGET_ID\" INTEGER NOT NULL ," + // 3: target_id
                "\"USER_ID\" INTEGER NOT NULL ," + // 4: user_id
                "\"VOICE_LENGTH\" INTEGER NOT NULL ," + // 5: voice_length
                "\"VOICE_PATH\" TEXT NOT NULL ," + // 6: voice_path
                "\"READ\" INTEGER NOT NULL ," + // 7: read
                "\"DATE_TIME\" INTEGER NOT NULL );"); // 8: date_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VOICE__MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Voice_Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOwner());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getTarget_id());
        stmt.bindLong(5, entity.getUser_id());
        stmt.bindLong(6, entity.getVoice_length());
        stmt.bindString(7, entity.getVoice_path());
        stmt.bindLong(8, entity.getRead() ? 1L: 0L);
        stmt.bindLong(9, entity.getDate_time().getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Voice_Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOwner());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getTarget_id());
        stmt.bindLong(5, entity.getUser_id());
        stmt.bindLong(6, entity.getVoice_length());
        stmt.bindString(7, entity.getVoice_path());
        stmt.bindLong(8, entity.getRead() ? 1L: 0L);
        stmt.bindLong(9, entity.getDate_time().getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Voice_Message readEntity(Cursor cursor, int offset) {
        Voice_Message entity = new Voice_Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // owner
            cursor.getInt(offset + 2), // type
            cursor.getInt(offset + 3), // target_id
            cursor.getInt(offset + 4), // user_id
            cursor.getInt(offset + 5), // voice_length
            cursor.getString(offset + 6), // voice_path
            cursor.getShort(offset + 7) != 0, // read
            new java.util.Date(cursor.getLong(offset + 8)) // date_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Voice_Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOwner(cursor.getInt(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setTarget_id(cursor.getInt(offset + 3));
        entity.setUser_id(cursor.getInt(offset + 4));
        entity.setVoice_length(cursor.getInt(offset + 5));
        entity.setVoice_path(cursor.getString(offset + 6));
        entity.setRead(cursor.getShort(offset + 7) != 0);
        entity.setDate_time(new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Voice_Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Voice_Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Voice_Message entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
